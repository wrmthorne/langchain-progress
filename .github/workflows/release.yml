name: Release

on:
  workflow_call:
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'

jobs:
  # Workaround to pass PYTHON_VERSION to context rather than steps
  env-vars:
    name: Get Environment vars
    runs-on: ubuntu-latest
    outputs:
      PYTHON_VERSION: ${{ env.PYTHON_VERSION }}

    steps:
      - run: echo "Fetching environment variables"

  build:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    outputs:
      pkg-name: ${{ steps.check-version.outputs.pkg-name }}
      version: ${{ steps.check-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install

      - name: Build project for distribution
        run: poetry build

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Check Version
        id: check-version
        shell: bash
        run: |
          echo pkg-name="$(poetry version | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
          echo version="$(poetry version --short)" >> $GITHUB_OUTPUT

  test-pypi-publish:
    needs: 
      - env-vars
      - build
    uses: ./.github/workflows/_test_release.yml
    with:
      python-version: ${{ needs.env-vars.outputs.PYTHON_VERSION }}

  pre-release-checks:
    needs:
      - build
      - test-pypi-publish
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          # Don't use caching to make testing maximally sensitive to catching breakage

      - name: Import published package
        shell: bash
        env:
          PKG_NAME: ${{ needs.build.outputs.pkg-name }}
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          poetry run pip install --extra-index-url https://test.pypi.org/simple/ "$PKG_NAME==$VERSION" || \
          ( sleep 5 && poetry run pip install --extra-index-url https://test.pypi.org/simple/ "$PKG_NAME==$VERSION" )

          IMPORT_NAME="$(echo "$PKG_NAME" | sed s/-/_/g)"
          poetry run python -c "import $IMPORT_NAME; print(dir($IMPORT_NAME))"

      - name: Import test dependencies
        run: poetry install --with test

      - name: Import published package (again)
        shell: bash
        env:
          PKG_NAME: ${{ needs.build.outputs.pkg-name }}
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          poetry run pip install --extra-index-url https://test.pypi.org/simple/ "$PKG_NAME==$VERSION"

      - name: Run tests
        run: poetry run python -m unittest

  publish:
    needs: 
      - build
      - test-pypi-publish
      - pre-release-checks
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
          print-hash: true

  mark-release:
    needs:
      - build
      - test-pypi-publish
      - pre-release-checks
      - publish
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          tag: v${{ needs.build.outputs.version }}
          artifacts: 'dist/*'
          commit: main
          generateReleaseNotes: true
          draft: false